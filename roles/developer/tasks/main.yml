---
# tasks for developer role
- name: Install developer packages
  become: true
  ansible.builtin.apt:
    name:
      - gcc
      - make
      - python3
      - python3-pip
    state: present

- name: Install golang
  ansible.builtin.apt:
    name:
      - golang
    state: present

- name: Install elixir
  ansible.builtin.apt:
    name:
      - erlang
      - elixir
      - erlang-doc
    state: present

# TODO Ruby and Rails -- move to it's own file?
- name: Install rbenv
  become: true
  ansible.builtin.apt:
    name:
      - rbenv
      - ruby-dev
    state: present

- name: Ruby and Rails environment setup
  become: false
  block:
    - name: Set rbenv root fact
      ansible.builtin.set_fact:
        rbenv_root: "/home/{{ ansible_user }}/.rbenv"
          # rbenv_root: "{{ lookup('env', 'RBENV_ROOT') | default('/home/' + ansible_user + '/.rbenv') }}"

    # debug message where trying to install ruby-build
    - name: Debug message
      ansible.builtin.debug:
        msg: "Installing ruby-build in {{ rbenv_root }}/plugins/ruby-build"

    - name: Ensure rbenv directory exists
      ansible.builtin.file:
        path: "{{ rbenv_root }}"
        state: directory
        mode: 0755

    - name: Ensure rbenv plugins directory exists
      ansible.builtin.file:
        path: "{{ rbenv_root }}/plugins"
        state: directory
        mode: 0755

    - name: Check if ruby-build is already installed
      ansible.builtin.stat:
        path: "{{ rbenv_root }}/plugins/ruby-build"
      register: ruby_build_dir

    - name: Install ruby-build
      ansible.builtin.git:
        repo: https://github.com/rbenv/ruby-build.git
        dest: "{{ rbenv_root }}/plugins/ruby-build"
      when: not ruby_build_dir.stat.exists

    - name: Add rbenv to .zshrc
      ansible.builtin.lineinfile:
        path: /home/{{ ansible_user }}/.zshrc
        regexp: ^eval "\$\(rbenv init -\)"
        line: eval "$(rbenv init -)"
      notify: Reload zsh

    - name: Install ruby
      ansible.builtin.command: rbenv install {{ ruby_version }}
      args:
        creates: /home/{{ ansible_user }}/.rbenv/versions/{{ ruby_version }}
      register: ruby_install_result

    - name: Check for ruby installation failure
      ansible.builtin.fail:
        msg: "Ruby installation failed: {{ ruby_install_result }}"
      when: ruby_install_result.rc != 0

    - name: Set global ruby version
      ansible.builtin.command: rbenv global {{ ruby_version }}

    - name: Set rbenv local version (in current directory)
      ansible.builtin.command: rbenv local {{ ruby_version }}
      args:
        chdir: "{{ project_root | default(ansible_env.PWD) }}"

    - name: Install bundler
      become: false  # No sudo needed for user installation
      ansible.builtin.gem:
        name: bundler
        user_install: true  # Install in user's home directory

    # rails installation
    - name: Install Rails
      become: false  # No sudo needed for user installation
      ansible.builtin.gem:
        name: rails
        version: "{{ rails_version | default('~> 7.1') }}"
        user_install: true  # Install in user's home directory

    - name: Check rails installation
      when: false
      ansible.builtin.command: rails --version
      register: rails_version_check
      changed_when: false # Don't report as changed if already installed

    - name: Display rails version
      when: false
      ansible.builtin.debug:
        msg: "Rails version: {{ rails_version_check.stdout }}"

- name: Install flatpack
  ansible.builtin.apt:
    name:
      - flatpak
    state: present

- name: Enable flathub repo
  become: false
  ansible.builtin.command: "flatpak remote-add --if-not-exists --user flathub https://flathub.org/repo/flathub.flatpakrepo"

- name: Install podman
  ansible.builtin.apt:
    name:
      - podman
    state: present

- name: Install podman-desktop
  become: false
  ansible.builtin.command: flatpak install -y flathub io.podman_desktop.PodmanDesktop

- name: Install gitnuro (git GUI)
  become: false
  ansible.builtin.command: flatpak install -y flathub com.jetpackduba.Gitnuro

# VS Code install
- name: Install VS Code on Debian/Ubuntu
  block:
    - name: Check the system architecture
      ansible.builtin.command: uname -m
      register: architecture
    
    - name: Set VS Code download URL based on architecture
      set_fact:
        vscode_url: >
          {% if architecture.stdout == "x86_64" %}
          https://go.microsoft.com/fwlink/?LinkID=760868
          {% elif architecture.stdout == "arm64" %}
          https://update.code.visualstudio.com/latest/linux-deb-arm64/stable
          {% elif architecture.stdout == "aarch64" %}
          https://update.code.visualstudio.com/latest/linux-deb-arm64/stable
          {% elif architecture.stdout == "amd64" %}
          https://go.microsoft.com/fwlink/?LinkID=760868
          {% else %}
          ""
          {% endif %}

    - name: Fail if unsupported architecture
      ansible.builtin.fail:
        msg: "Unsupported architecture: {{ architecture.stdout }}"
      when: vscode_url == ""
    
    - name: Check if VS Code is installed
      shell: dpkg -s code | grep "ok installed"
      register: vscode_installed
      ignore_errors: true
      changed_when: false

- name: Install VS Code on Debian/Ubuntu
  block:

    - name: Add arm64 architecture
      ansible.builtin.command: dpkg --add-architecture arm64
      become: yes
      when: architecture.stdout == "arm64" or architecture.stdout == "aarch64"

    - name: Update apt package list
      ansible.builtin.apt:
        update_cache: yes
      become: yes
      when: architecture.stdout == "arm64" or architecture.stdout == "aarch64"
    
    - name: Debug message of URL being used
      ansible.builtin.debug:
        msg: 
          - "Architecture {{ architecture.stdout }}"
          - "Pulling VS Code from {{ vscode_url }}"

    - name: Download VS Code
      ansible.builtin.get_url:
        url: "{{ vscode_url }}"
        dest: /tmp/vscode.deb
        force: true

    - name: Install VS Code
      ansible.builtin.apt:
        deb: /tmp/vscode.deb
        state: present
  when: vscode_installed.rc != 0 and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: true #redundant but good practice
